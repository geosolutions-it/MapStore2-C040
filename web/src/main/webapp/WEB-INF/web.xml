<web-app id="WebApp_ID" version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee
    http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">

    <display-name>GeoPortale - Comune di Genova - Web App</display-name>
	<context-param>
        <param-name>webAppRootKey</param-name>
        <param-value>geostore.root</param-value>
    </context-param>

    <context-param>
      <param-name>proxyPropPath</param-name>
      <param-value>/proxy.properties</param-value>
    </context-param>

    <!-- spring context loader -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!-- CXF Servlet -->
	<servlet>
		<servlet-name>CXFServlet</servlet-name>
		<servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>
	</servlet>

    <servlet-mapping>
		<servlet-name>CXFServlet</servlet-name>
		<url-pattern>/rest/geostore/*</url-pattern>
	</servlet-mapping>

    <!-- Proxy Servlet -->
    <servlet>
      <servlet-name>HttpProxy</servlet-name>
      <servlet-class>it.geosolutions.httpproxy.HTTPProxy</servlet-class>
    </servlet>

    <servlet-mapping>
      <servlet-name>HttpProxy</servlet-name>
      <url-pattern>/proxy/*</url-pattern>
    </servlet-mapping>

    <!-- pick up all spring application contexts -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>/WEB-INF/applicationContext.xml</param-value>
    </context-param>

    <!-- Spring Security Servlet -->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

    <!-- SIRAC -->

    <context-param>
        <param-name>showDetailInErrorPage</param-name>
        <param-value>false</param-value>
    </context-param>

    <context-param>
        <param-name>people.sirac.error.returnURL</param-name>
        <!-- Production -->
        <!-- <param-value>http://mappe.comune.genova.it/MapStore2</param-value> -->
        <!-- Test -->
        <param-value>http://vm-linuxgeofetest.comune.genova.it/MapStore2</param-value>
    </context-param>

    <context-param>
        <param-name>authenticationResponseReceiverServiceTransferMode</param-name>
        <!--  Indicare FORWARD o POST -->
        <param-value>POST</param-value>
    </context-param>

    <context-param>
        <param-name>encryptAuthResponse</param-name>
        <param-value>true</param-value>
    </context-param>

    <context-param>
        <param-name>encryptAuthResponseKeyFile</param-name>
        <!--  path relativo alla webapp -->
        <param-value>/keystore/encryptAuthResponse_Rijndael_256_PBEWithSHAAnd128BitRC4_100.key</param-value>
    </context-param>

    <context-param>
        <param-name>encryptAuthResponseKeyFilePassPhrase</param-name>
        <param-value>testpassphrase</param-value>
    </context-param>

    <context-param>
        <param-name>authResponseExpirationTime</param-name>
        <!--  expiration time in msec (usato solo nel caso di TransferMode=POST)-->
        <param-value>300000</param-value>
    </context-param>

    <context-param>
        <param-name>authResponseExpirationDateTimeFormat</param-name>
        <param-value>yyyyMMdd'T'HH:mm:ss.SSSz</param-value>
    </context-param>

    <context-param>
        <param-name>ignoreAuthResponseExpirationTime</param-name>
        <param-value>false</param-value>
    </context-param>

    <context-param>
        <param-name>externalHostURL</param-name>
        <!-- Test -->
        <param-value>http://vm-linuxgeofetest.comune.genova.it</param-value>
        <!-- Production -->
        <!-- <param-value>http://mappe.comune.genova.it</param-value> -->
    </context-param>

    <filter>
        <filter-name>SIRAC-SSO Service Profile Loader Filter</filter-name>
        <filter-class>it.people.sirac.filters.GenericSiracServiceProfileLoaderFilter</filter-class>
        <init-param>
            <param-name>serviceProfileLocations</param-name>
            <param-value>/WEB-INF/classes/serviceProfile-list.properties</param-value>
        </init-param>
    </filter>

    <filter>
        <filter-name>SIRAC-SSO Authentication Filter</filter-name>
        <filter-class>it.geosolutions.sirac.AuthenticationFilter</filter-class>
        <init-param>
            <param-name>SIRACGatewayRedirectURL</param-name>
            <!-- Test -->
            <param-value>https://vm-siracssotest.comune.genova.it/sirac-sso/AuthGatewayWAYFService/gistest3</param-value>
            <!-- Production -->
            <!-- <param-value>https://vm-siracsso.comune.genova.it/sirac-sso/AuthGatewayWAYFService/gis2</param-value> -->
        </init-param>
        <init-param>
            <param-name>assertionConsumerURL</param-name>
            <!-- Test -->
            <param-value>https://vm-siracssotest.comune.genova.it/sirac-sso/AssertionConsumerService</param-value>
            <!-- Production -->
            <!-- <param-value>https://vm-siracsso.comune.genova.it/sirac-sso/AssertionConsumerService</param-value> -->
        </init-param>
        <init-param>
            <param-name>postAuthRequestPage</param-name>
            <!-- must be relative to the same host:port -->
            <param-value>/LoginServlet</param-value>
        </init-param>
    </filter>

    <servlet>
      <servlet-name>LoginServlet</servlet-name>
      <servlet-class>it.geosolutions.sirac.LoginServlet</servlet-class>
      <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>LoginServlet</servlet-name>
        <url-pattern>/LoginServlet</url-pattern>
    </servlet-mapping>

    <filter-mapping>
        <filter-name>SIRAC-SSO Service Profile Loader Filter</filter-name>
        <url-pattern>/login/*</url-pattern>
    </filter-mapping>

    <filter-mapping>
        <filter-name>SIRAC-SSO Authentication Filter</filter-name>
        <url-pattern>/login/*</url-pattern>
    </filter-mapping>

    <listener>
        <listener-class>it.people.sirac.web.listeners.SessionListener</listener-class>
    </listener>

    <listener>
        <listener-class>it.geosolutions.sirac.CleanSession</listener-class>
    </listener>

    <servlet>
        <servlet-name>CleanSessionServlet</servlet-name>
        <servlet-class>it.people.sirac.web.InvalidateSessionServlet</servlet-class>
    </servlet>

    <!-- This was missing in the documentation -->
    <servlet-mapping>
        <servlet-name>CleanSessionServlet</servlet-name>
        <url-pattern>/cleanSession</url-pattern>
    </servlet-mapping>

    <servlet>
        <description>Authentication Response Receiver Service</description>
        <display-name>Authentication Response Receiver Service</display-name>
        <servlet-name>AuthResponseReceiverService</servlet-name>
        <servlet-class>it.people.sirac.web.GenericAuthenticationResponseReceiverServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet>
        <description>SIRAC SSO Global Logout Gateway Service</description>
        <display-name>SIRAC SSO Global Logout Gateway</display-name>
        <servlet-name>SSOGlobalLogoutGatewayService</servlet-name>
        <servlet-class>it.people.sirac.web.SSOGlobalLogoutGatewayServlet</servlet-class>
        <init-param>
            <param-name>globalLogoutURL</param-name>
            <!-- URL assoluta -->
            <!-- Test -->
            <param-value>https://vm-siracssotest.comune.genova.it/sirac-sso/SSOGlobalLogoutService</param-value>
            <!-- Production -->
            <!-- <param-value>https://vm-siracsso.comune.genova.it/sirac-sso/SSOGlobalLogoutService</param-value> -->
        </init-param>
        <init-param>
            <param-name>globalLogoutReturnURL</param-name>
            <!-- URL relativa -->
            <param-value>/</param-value>
        </init-param>
    </servlet>

    <servlet>
        <description>SSO Local Logout Callback Service</description>
        <display-name>SSOLocalLogoutCallbackService</display-name>
        <servlet-name>SSOLocalLogoutCallbackService</servlet-name>
        <servlet-class>it.people.sirac.web.SSOLocalLogoutCallbackServlet</servlet-class>
        <init-param>
            <param-name>SSOGlobalLogoutSuccessImagePath</param-name>
            <!-- URL relativa -->
            <param-value>images/ssoLogoutSuccess.jpg</param-value>
        </init-param>
    </servlet>

    <servlet-mapping>
        <servlet-name>AuthResponseReceiverService</servlet-name>
        <url-pattern>/AuthResponseReceiverService</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>SSOGlobalLogoutGatewayService</servlet-name>
        <url-pattern>/SSOGlobalLogoutGatewayService</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>SSOLocalLogoutCallbackService</servlet-name>
        <url-pattern>/SSOLocalLogoutService</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>SSOLocalLogoutCallbackService</servlet-name>
        <url-pattern>/ssolocalLogout</url-pattern>
    </servlet-mapping>

    <error-page>
        <exception-type>it.people.sirac.error.SiracException</exception-type>
        <location>/reserved/SiracError.jsp</location>
    </error-page>
<!-- Do not use SiracError page to catch every exception
    <error-page>
        <exception-type>java.lang.RuntimeException</exception-type>
        <location>/reserved/SiracError.jsp</location>
    </error-page>
-->
    <context-param>
        <param-name>people.sirac.error.page</param-name>
        <param-value>/reserved/SiracError.jsp</param-value>
    </context-param>

    <session-config>
        <session-timeout>30</session-timeout>
    </session-config>
    <!-- END SIRAC CONFIG -->

    <!-- servlet to redirect after login -->
    <servlet>
      <servlet-name>HttpSessionDisplay</servlet-name>
      <servlet-class>it.geosolutions.sirac.HttpSessionDisplay</servlet-class>
    </servlet>
    <servlet-mapping>
      <servlet-name>HttpSessionDisplay</servlet-name>
      <url-pattern>/login</url-pattern>
    </servlet-mapping>
    <!-- Printing Servlet -->
    <servlet>
        <servlet-name>mapfish.print</servlet-name>
        <servlet-class>org.mapfish.print.servlet.MapPrinterServlet</servlet-class>
        <init-param>
            <param-name>config</param-name>
            <param-value>printing/config.yaml</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>mapfish.print</servlet-name>
        <url-pattern>/pdf/*</url-pattern>
    </servlet-mapping>

</web-app>
